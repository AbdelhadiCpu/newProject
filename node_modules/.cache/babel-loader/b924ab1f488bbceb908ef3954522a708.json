{"ast":null,"code":"/*import { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\"\nimport React, { useEffect, useState } from \"react\"\nimport './board.css'\nimport Chat from \"../chat\"\nimport Axios from \"axios\"\nimport swal from 'sweetalert'\nimport zoom from './zoom.jpg'\n//import { io } from \"socket.io-client\"\n\n//const socket = io('http://localhost:3001/')\n\n/*const mockData = {\n    todo: {\n        name: \"Todo\",\n        items: [{\n            id: 1000,\n            text: \"Görev 5656\"\n        }, {\n            id: 2000,\n            text: \"Görev 5959\"\n        }]\n    },\n    inprogress: {\n        name: \"Inprogress\",\n        items: [{\n            id: 100,\n            text: \"Görev 1099\"\n        }]\n    },\n    inreview: {\n        name: \"InReview\",\n        items: [{\n            id: 10000,\n            text: \"Görev 2002\"\n        }]\n    },\n    intest: {\n        name: \"InTest\",\n        items: [{\n            id: 100002,\n            text: \"Görev 5588\"\n        }]\n    },\n    done: {\n        name: \"Done\",\n        items: [{\n            id: 10000232,\n            text: \"Görev 9889\"\n        }]\n    }\n}\nfunction BoardList() {\n    const StoredToken = localStorage.getItem('token')\n    const room = 'http://localhost:3001/board/' + StoredToken.substring(20, 30)\n\n\n    var [mockData, setData] = useState({\n        todo: {\n            name: \"Todo\",\n            items: [{\n                id: 1000,\n                text: \"Make a UX/UI design\"\n            }, {\n                id: 2000,\n                text: \"Project Conception\"\n            }]\n        },\n        inprogress: {\n            name: \"Inprogress\",\n            items: [{\n                id: 100,\n                text: \"Project Dev\"\n            }]\n        },\n        inreview: {\n            name: \"InReview\",\n            items: [{\n                id: 10000,\n                text: \"MVC\"\n            }]\n        },\n        intest: {\n            name: \"InTest\",\n            items: [{\n                id: 100002,\n                text: \"Integrated Test\"\n            }]\n        },\n        done: {\n            name: \"Done\",\n            items: [{\n                id: 10000232,\n                text: \"BrainStorming\"\n            }]\n        }\n    })\n\n\n\n\n\n    const [cols, setCols] = useState(mockData)\n    const onDragEnd = (result, cols, setCols) => {\n        if (!result.destination) return\n        const { source, destination } = result\n\n        if (source.droppableId !== destination.droppableId) {\n            const sourceCol = cols[source.droppableId]\n            const destCol = cols[destination.droppableId]\n            const sourceItems = [...sourceCol.items]\n            const destItems = [...destCol.items]\n            const [removed] = sourceItems.splice(source.index, 1)\n            destItems.splice(destination.index, 0, removed)\n            setCols({\n                ...cols,\n                [source.droppableId]: {\n                    ...sourceCol,\n                    items: sourceItems\n                },\n                [destination.droppableId]: {\n                    ...destCol,\n                    items: destItems\n                }\n            })\n\n\n        } else {\n            const columns = cols[source.droppableId]\n            const _items = [...columns.items]\n            const [removed] = _items.splice(source.index, 1)\n            _items.splice(destination.index, 0, removed)\n            setCols({\n                ...cols,\n                [source.droppableId]: {\n                    ...columns,\n                    items: _items\n                }\n            })\n        }\n    }\n    const [todos, setTodos] = useState('')\n    const [account, setAccount] = useState('')\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n    }\n\n    const handleChange1 = (e) => {\n        setTodos(e.target.value)\n    }\n\n    const handleChange2 = (e) => {\n        setAccount(e.target.value)\n    }\n\n\n\n    const ListTodo = () => {\n        Object.entries(cols).filter((to) => {\n            console.log(todos, to[1])\n\n            if (to[1].name == 'Todo') {\n                to[1].items.push({ id: todos.length + 1 + (Math.floor(Math.random() * 100)) * (Math.floor(Math.random() * 1000)), text: todos })\n                console.log(to[1])\n            }\n\n\n        })\n        Update()\n    }\n\n    const SendInvitation = () => {\n        Axios.post(room, {\n            account: account\n        }).then((response) => {\n            console.log(response.data.message)\n            if (response.data.message == 'Email Not Valid') {\n                swal('Oops!', response.data.message, 'error')\n\n            } else {\n                swal('Congrats!', response.data.message, 'success')\n            }\n\n        })\n    }\n\n\n\n\n    /*const onChange = (e)=>{\n        socket.emit('typing',{username:username})\n    }\n\n    useEffect(()=>{\n        socket.on('someOneTyping',(user)=>{\n            setTyping(user.username+'is Typing....')\n        })\n    },[])\n\n    const Update = async () => {\n        localStorage.setItem('TransferedData', JSON.stringify(cols))\n        let Updated = localStorage.getItem('TransferedData')\n        let mockDataUpdated = JSON.parse(Updated)\n        setCols(mockDataUpdated)\n\n\n        //Object.assign(mockData,mockDataUpdated)\n\n        console.log(mockData)\n    }\n\n\n\n\n\n\n\n\n    return (\n        <div>\n            <div className=\"Options\" style={{ display: 'flex' }}>\n                <div className=\"contextTo\" style={{ marginLeft: '10rem', marginTop: '1rem', display: 'flex' }}>\n                    <input\n                        style={{ backgroundColor: '#DFCFBE' }}\n                        type=\"text\"\n                        className=\"todos\"\n                        placeholder=\"To Do\"\n                        name=\"todos\"\n                        maxLength='30'\n                        value={todos}\n                        onChange={handleChange1}\n                    />\n                    <button onClick={ListTodo} onSubmit={handleSubmit} type='submit' className='addToDo' style={{ backgroundColor: '#55c2da', maxHeight: '1.90rem' }}>Go</button>\n\n\n\n                </div>\n\n                <div className=\"contextToInvite\" style={{ marginLeft: '10rem', marginTop: '1rem', display: 'flex' }}>\n                    <input\n                        style={{ backgroundColor: '#DFCFBE' }}\n                        type=\"text\"\n                        className=\"toInvite\"\n                        placeholder=\"Invite friends by Gmail\"\n                        name=\"account\"\n                        value={account}\n                        onChange={handleChange2}\n                    />\n                    <button onClick={SendInvitation} onSubmit={handleSubmit} type='submit' className='addFriend' style={{ backgroundColor: '#55c2da', maxHeight: '1.90rem' }}>Invite</button>\n\n\n\n                </div>\n\n                <a href='https://zoom.us/'><img className=\"zoomImg\" alt='zoom-img' src={zoom} /></a>\n\n            </div>\n\n            <div className=\"app-container\">\n\n\n                <DragDropContext onDragEnd={(result) => {\n                    onDragEnd(result, cols, setCols)\n\n\n                }}>\n\n                    {Object.entries(cols).map(([id, col], index) => {\n                        return (\n                            <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }} key={index}>\n                                <h5 style={{ backgroundColor: '#FFFF00' }}>{col.name}</h5>\n                                <div style={{ marginLeft: \"8px\" }}>\n                                    <Droppable droppableId={id} key={id}>\n                                        {(provider, snapshot) => {\n                                            return (\n                                                <div   {...provider.droppableProps}\n                                                    style={{\n                                                        border: \"none\",\n                                                        boxShadow: '0 0 4px purple',\n                                                        borderRadius: '5px',\n                                                        backgroundColor: snapshot.isDraggingOver ? \"#e7e7e7\" : \"#fff\",\n                                                        padding: \"8px\", height: \"800px\", width: \"300px\",\n\n\n                                                    }}\n                                                    ref={provider.innerRef}>\n                                                    {col.items.map((item, index) => {\n                                                        return (\n                                                            <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\n                                                                {(provider, snapshot) => {\n                                                                    return (\n                                                                        <div ref={provider.innerRef}\n                                                                            {...provider.dragHandleProps}\n                                                                            {...provider.draggableProps}\n                                                                            style={{\n                                                                                padding: \"16px\",\n                                                                                margin: \"0 0 16px 0\",\n                                                                                height: \"40px\",\n                                                                                borderRadius: \"8px\",\n                                                                                backgroundColor: snapshot.isDragging ? \"#cccccc\" : \"#e7e7e7\",\n                                                                                ...provider.draggableProps.style\n                                                                            }}\n                                                                        >\n\n\n                                                                            {item.text}\n\n\n                                                                            <img className=\"delete\"\n                                                                                onClick={(event) => {\n\n                                                                                    console.log(event.currentTarget.id)\n                                                                                    Object.entries(cols).filter((arr) => {\n                                                                                        console.log(arr[1])\n                                                                                        if (arr[1]) {\n                                                                                            for (let i = 0; i < arr[1].items.length; i++) {\n                                                                                                if (arr[1].items[i].id == event.currentTarget.id) {\n                                                                                                    //console.log(arr[1].items[i])\n                                                                                                    var poped = arr[1].items.splice(i, 1)\n                                                                                                    console.log('deleted' + poped[0].text)\n                                                                                                    //console.log(arr)\n                                                                                                }\n\n                                                                                            }\n\n\n\n                                                                                        }\n\n                                                                                    })\n                                                                                    Update()\n\n                                                                                }}\n                                                                                id={item.id}\n                                                                                src='https://toppng.com/uploads/preview/recycling-bin-vector-delete-icon-png-black-11563002079w1isxqyyiv.png'\n                                                                                style={{ height: \"1.25rem\", width: \"1.25rem\", marginLeft: '0.7rem' }}\n\n                                                                            />\n\n                                                                        </div>\n                                                                    )\n                                                                }}\n\n                                                            </Draggable>\n                                                        )\n                                                    })}\n                                                    {provider.placeholder}\n                                                </div>\n                                            )\n                                        }}\n                                    </Droppable>\n                                </div>\n                            </div>\n                        )\n                    })}\n                </DragDropContext>\n                <Chat />\n            </div>\n\n\n\n        </div>\n    );\n}\n\nexport default BoardList\n\n*/","map":{"version":3,"names":[],"sources":["/Users/abdelhadibakhty/Documents/GitHub/Project/src/components/page1/page1.js"],"sourcesContent":["/*import { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\"\nimport React, { useEffect, useState } from \"react\"\nimport './board.css'\nimport Chat from \"../chat\"\nimport Axios from \"axios\"\nimport swal from 'sweetalert'\nimport zoom from './zoom.jpg'\n//import { io } from \"socket.io-client\"\n\n//const socket = io('http://localhost:3001/')\n\n/*const mockData = {\n    todo: {\n        name: \"Todo\",\n        items: [{\n            id: 1000,\n            text: \"Görev 5656\"\n        }, {\n            id: 2000,\n            text: \"Görev 5959\"\n        }]\n    },\n    inprogress: {\n        name: \"Inprogress\",\n        items: [{\n            id: 100,\n            text: \"Görev 1099\"\n        }]\n    },\n    inreview: {\n        name: \"InReview\",\n        items: [{\n            id: 10000,\n            text: \"Görev 2002\"\n        }]\n    },\n    intest: {\n        name: \"InTest\",\n        items: [{\n            id: 100002,\n            text: \"Görev 5588\"\n        }]\n    },\n    done: {\n        name: \"Done\",\n        items: [{\n            id: 10000232,\n            text: \"Görev 9889\"\n        }]\n    }\n}\nfunction BoardList() {\n    const StoredToken = localStorage.getItem('token')\n    const room = 'http://localhost:3001/board/' + StoredToken.substring(20, 30)\n\n\n    var [mockData, setData] = useState({\n        todo: {\n            name: \"Todo\",\n            items: [{\n                id: 1000,\n                text: \"Make a UX/UI design\"\n            }, {\n                id: 2000,\n                text: \"Project Conception\"\n            }]\n        },\n        inprogress: {\n            name: \"Inprogress\",\n            items: [{\n                id: 100,\n                text: \"Project Dev\"\n            }]\n        },\n        inreview: {\n            name: \"InReview\",\n            items: [{\n                id: 10000,\n                text: \"MVC\"\n            }]\n        },\n        intest: {\n            name: \"InTest\",\n            items: [{\n                id: 100002,\n                text: \"Integrated Test\"\n            }]\n        },\n        done: {\n            name: \"Done\",\n            items: [{\n                id: 10000232,\n                text: \"BrainStorming\"\n            }]\n        }\n    })\n\n\n\n\n\n    const [cols, setCols] = useState(mockData)\n    const onDragEnd = (result, cols, setCols) => {\n        if (!result.destination) return\n        const { source, destination } = result\n\n        if (source.droppableId !== destination.droppableId) {\n            const sourceCol = cols[source.droppableId]\n            const destCol = cols[destination.droppableId]\n            const sourceItems = [...sourceCol.items]\n            const destItems = [...destCol.items]\n            const [removed] = sourceItems.splice(source.index, 1)\n            destItems.splice(destination.index, 0, removed)\n            setCols({\n                ...cols,\n                [source.droppableId]: {\n                    ...sourceCol,\n                    items: sourceItems\n                },\n                [destination.droppableId]: {\n                    ...destCol,\n                    items: destItems\n                }\n            })\n\n\n        } else {\n            const columns = cols[source.droppableId]\n            const _items = [...columns.items]\n            const [removed] = _items.splice(source.index, 1)\n            _items.splice(destination.index, 0, removed)\n            setCols({\n                ...cols,\n                [source.droppableId]: {\n                    ...columns,\n                    items: _items\n                }\n            })\n        }\n    }\n    const [todos, setTodos] = useState('')\n    const [account, setAccount] = useState('')\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n    }\n\n    const handleChange1 = (e) => {\n        setTodos(e.target.value)\n    }\n\n    const handleChange2 = (e) => {\n        setAccount(e.target.value)\n    }\n\n\n\n    const ListTodo = () => {\n        Object.entries(cols).filter((to) => {\n            console.log(todos, to[1])\n\n            if (to[1].name == 'Todo') {\n                to[1].items.push({ id: todos.length + 1 + (Math.floor(Math.random() * 100)) * (Math.floor(Math.random() * 1000)), text: todos })\n                console.log(to[1])\n            }\n\n\n        })\n        Update()\n    }\n\n    const SendInvitation = () => {\n        Axios.post(room, {\n            account: account\n        }).then((response) => {\n            console.log(response.data.message)\n            if (response.data.message == 'Email Not Valid') {\n                swal('Oops!', response.data.message, 'error')\n\n            } else {\n                swal('Congrats!', response.data.message, 'success')\n            }\n\n        })\n    }\n\n\n\n\n    /*const onChange = (e)=>{\n        socket.emit('typing',{username:username})\n    }\n\n    useEffect(()=>{\n        socket.on('someOneTyping',(user)=>{\n            setTyping(user.username+'is Typing....')\n        })\n    },[])\n\n    const Update = async () => {\n        localStorage.setItem('TransferedData', JSON.stringify(cols))\n        let Updated = localStorage.getItem('TransferedData')\n        let mockDataUpdated = JSON.parse(Updated)\n        setCols(mockDataUpdated)\n\n\n        //Object.assign(mockData,mockDataUpdated)\n\n        console.log(mockData)\n    }\n\n\n\n\n\n\n\n\n    return (\n        <div>\n            <div className=\"Options\" style={{ display: 'flex' }}>\n                <div className=\"contextTo\" style={{ marginLeft: '10rem', marginTop: '1rem', display: 'flex' }}>\n                    <input\n                        style={{ backgroundColor: '#DFCFBE' }}\n                        type=\"text\"\n                        className=\"todos\"\n                        placeholder=\"To Do\"\n                        name=\"todos\"\n                        maxLength='30'\n                        value={todos}\n                        onChange={handleChange1}\n                    />\n                    <button onClick={ListTodo} onSubmit={handleSubmit} type='submit' className='addToDo' style={{ backgroundColor: '#55c2da', maxHeight: '1.90rem' }}>Go</button>\n\n\n\n                </div>\n\n                <div className=\"contextToInvite\" style={{ marginLeft: '10rem', marginTop: '1rem', display: 'flex' }}>\n                    <input\n                        style={{ backgroundColor: '#DFCFBE' }}\n                        type=\"text\"\n                        className=\"toInvite\"\n                        placeholder=\"Invite friends by Gmail\"\n                        name=\"account\"\n                        value={account}\n                        onChange={handleChange2}\n                    />\n                    <button onClick={SendInvitation} onSubmit={handleSubmit} type='submit' className='addFriend' style={{ backgroundColor: '#55c2da', maxHeight: '1.90rem' }}>Invite</button>\n\n\n\n                </div>\n\n                <a href='https://zoom.us/'><img className=\"zoomImg\" alt='zoom-img' src={zoom} /></a>\n\n            </div>\n\n            <div className=\"app-container\">\n\n\n                <DragDropContext onDragEnd={(result) => {\n                    onDragEnd(result, cols, setCols)\n\n\n                }}>\n\n                    {Object.entries(cols).map(([id, col], index) => {\n                        return (\n                            <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }} key={index}>\n                                <h5 style={{ backgroundColor: '#FFFF00' }}>{col.name}</h5>\n                                <div style={{ marginLeft: \"8px\" }}>\n                                    <Droppable droppableId={id} key={id}>\n                                        {(provider, snapshot) => {\n                                            return (\n                                                <div   {...provider.droppableProps}\n                                                    style={{\n                                                        border: \"none\",\n                                                        boxShadow: '0 0 4px purple',\n                                                        borderRadius: '5px',\n                                                        backgroundColor: snapshot.isDraggingOver ? \"#e7e7e7\" : \"#fff\",\n                                                        padding: \"8px\", height: \"800px\", width: \"300px\",\n\n\n                                                    }}\n                                                    ref={provider.innerRef}>\n                                                    {col.items.map((item, index) => {\n                                                        return (\n                                                            <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\n                                                                {(provider, snapshot) => {\n                                                                    return (\n                                                                        <div ref={provider.innerRef}\n                                                                            {...provider.dragHandleProps}\n                                                                            {...provider.draggableProps}\n                                                                            style={{\n                                                                                padding: \"16px\",\n                                                                                margin: \"0 0 16px 0\",\n                                                                                height: \"40px\",\n                                                                                borderRadius: \"8px\",\n                                                                                backgroundColor: snapshot.isDragging ? \"#cccccc\" : \"#e7e7e7\",\n                                                                                ...provider.draggableProps.style\n                                                                            }}\n                                                                        >\n\n\n                                                                            {item.text}\n\n\n                                                                            <img className=\"delete\"\n                                                                                onClick={(event) => {\n\n                                                                                    console.log(event.currentTarget.id)\n                                                                                    Object.entries(cols).filter((arr) => {\n                                                                                        console.log(arr[1])\n                                                                                        if (arr[1]) {\n                                                                                            for (let i = 0; i < arr[1].items.length; i++) {\n                                                                                                if (arr[1].items[i].id == event.currentTarget.id) {\n                                                                                                    //console.log(arr[1].items[i])\n                                                                                                    var poped = arr[1].items.splice(i, 1)\n                                                                                                    console.log('deleted' + poped[0].text)\n                                                                                                    //console.log(arr)\n                                                                                                }\n\n                                                                                            }\n\n\n\n                                                                                        }\n\n                                                                                    })\n                                                                                    Update()\n\n                                                                                }}\n                                                                                id={item.id}\n                                                                                src='https://toppng.com/uploads/preview/recycling-bin-vector-delete-icon-png-black-11563002079w1isxqyyiv.png'\n                                                                                style={{ height: \"1.25rem\", width: \"1.25rem\", marginLeft: '0.7rem' }}\n\n                                                                            />\n\n                                                                        </div>\n                                                                    )\n                                                                }}\n\n                                                            </Draggable>\n                                                        )\n                                                    })}\n                                                    {provider.placeholder}\n                                                </div>\n                                            )\n                                        }}\n                                    </Droppable>\n                                </div>\n                            </div>\n                        )\n                    })}\n                </DragDropContext>\n                <Chat />\n            </div>\n\n\n\n        </div>\n    );\n}\n\nexport default BoardList\n\n*/\n\n\n"],"mappings},"metadata":{},"sourceType":"module"}